// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uta.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_uta_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_uta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_uta_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_uta_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_uta_2eproto;
class ATUCommands;
struct ATUCommandsDefaultTypeInternal;
extern ATUCommandsDefaultTypeInternal _ATUCommands_default_instance_;
class ATULoaded;
struct ATULoadedDefaultTypeInternal;
extern ATULoadedDefaultTypeInternal _ATULoaded_default_instance_;
class ATURequestPickUp;
struct ATURequestPickUpDefaultTypeInternal;
extern ATURequestPickUpDefaultTypeInternal _ATURequestPickUp_default_instance_;
class AUConnected;
struct AUConnectedDefaultTypeInternal;
extern AUConnectedDefaultTypeInternal _AUConnected_default_instance_;
class AUErr;
struct AUErrDefaultTypeInternal;
extern AUErrDefaultTypeInternal _AUErr_default_instance_;
class Desti_loc;
struct Desti_locDefaultTypeInternal;
extern Desti_locDefaultTypeInternal _Desti_loc_default_instance_;
class UTAArrived;
struct UTAArrivedDefaultTypeInternal;
extern UTAArrivedDefaultTypeInternal _UTAArrived_default_instance_;
class UTACommands;
struct UTACommandsDefaultTypeInternal;
extern UTACommandsDefaultTypeInternal _UTACommands_default_instance_;
class UTAConnect;
struct UTAConnectDefaultTypeInternal;
extern UTAConnectDefaultTypeInternal _UTAConnect_default_instance_;
class UTADelivered;
struct UTADeliveredDefaultTypeInternal;
extern UTADeliveredDefaultTypeInternal _UTADelivered_default_instance_;
class UTAOutDelivery;
struct UTAOutDeliveryDefaultTypeInternal;
extern UTAOutDeliveryDefaultTypeInternal _UTAOutDelivery_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ATUCommands* Arena::CreateMaybeMessage<::ATUCommands>(Arena*);
template<> ::ATULoaded* Arena::CreateMaybeMessage<::ATULoaded>(Arena*);
template<> ::ATURequestPickUp* Arena::CreateMaybeMessage<::ATURequestPickUp>(Arena*);
template<> ::AUConnected* Arena::CreateMaybeMessage<::AUConnected>(Arena*);
template<> ::AUErr* Arena::CreateMaybeMessage<::AUErr>(Arena*);
template<> ::Desti_loc* Arena::CreateMaybeMessage<::Desti_loc>(Arena*);
template<> ::UTAArrived* Arena::CreateMaybeMessage<::UTAArrived>(Arena*);
template<> ::UTACommands* Arena::CreateMaybeMessage<::UTACommands>(Arena*);
template<> ::UTAConnect* Arena::CreateMaybeMessage<::UTAConnect>(Arena*);
template<> ::UTADelivered* Arena::CreateMaybeMessage<::UTADelivered>(Arena*);
template<> ::UTAOutDelivery* Arena::CreateMaybeMessage<::UTAOutDelivery>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class UTAConnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UTAConnect) */ {
 public:
  inline UTAConnect() : UTAConnect(nullptr) {}
  ~UTAConnect() override;
  explicit PROTOBUF_CONSTEXPR UTAConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UTAConnect(const UTAConnect& from);
  UTAConnect(UTAConnect&& from) noexcept
    : UTAConnect() {
    *this = ::std::move(from);
  }

  inline UTAConnect& operator=(const UTAConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline UTAConnect& operator=(UTAConnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UTAConnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const UTAConnect* internal_default_instance() {
    return reinterpret_cast<const UTAConnect*>(
               &_UTAConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UTAConnect& a, UTAConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(UTAConnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UTAConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UTAConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UTAConnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UTAConnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UTAConnect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UTAConnect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UTAConnect";
  }
  protected:
  explicit UTAConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldidFieldNumber = 1,
  };
  // required int64 worldid = 1;
  bool has_worldid() const;
  private:
  bool _internal_has_worldid() const;
  public:
  void clear_worldid();
  int64_t worldid() const;
  void set_worldid(int64_t value);
  private:
  int64_t _internal_worldid() const;
  void _internal_set_worldid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:UTAConnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t worldid_;
  friend struct ::TableStruct_uta_2eproto;
};
// -------------------------------------------------------------------

class AUConnected final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUConnected) */ {
 public:
  inline AUConnected() : AUConnected(nullptr) {}
  ~AUConnected() override;
  explicit PROTOBUF_CONSTEXPR AUConnected(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AUConnected(const AUConnected& from);
  AUConnected(AUConnected&& from) noexcept
    : AUConnected() {
    *this = ::std::move(from);
  }

  inline AUConnected& operator=(const AUConnected& from) {
    CopyFrom(from);
    return *this;
  }
  inline AUConnected& operator=(AUConnected&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AUConnected& default_instance() {
    return *internal_default_instance();
  }
  static inline const AUConnected* internal_default_instance() {
    return reinterpret_cast<const AUConnected*>(
               &_AUConnected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AUConnected& a, AUConnected& b) {
    a.Swap(&b);
  }
  inline void Swap(AUConnected* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AUConnected* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AUConnected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AUConnected>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AUConnected& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AUConnected& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AUConnected* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUConnected";
  }
  protected:
  explicit AUConnected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldidFieldNumber = 1,
  };
  // required int64 worldid = 1;
  bool has_worldid() const;
  private:
  bool _internal_has_worldid() const;
  public:
  void clear_worldid();
  int64_t worldid() const;
  void set_worldid(int64_t value);
  private:
  int64_t _internal_worldid() const;
  void _internal_set_worldid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AUConnected)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t worldid_;
  friend struct ::TableStruct_uta_2eproto;
};
// -------------------------------------------------------------------

class Desti_loc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Desti_loc) */ {
 public:
  inline Desti_loc() : Desti_loc(nullptr) {}
  ~Desti_loc() override;
  explicit PROTOBUF_CONSTEXPR Desti_loc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Desti_loc(const Desti_loc& from);
  Desti_loc(Desti_loc&& from) noexcept
    : Desti_loc() {
    *this = ::std::move(from);
  }

  inline Desti_loc& operator=(const Desti_loc& from) {
    CopyFrom(from);
    return *this;
  }
  inline Desti_loc& operator=(Desti_loc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Desti_loc& default_instance() {
    return *internal_default_instance();
  }
  static inline const Desti_loc* internal_default_instance() {
    return reinterpret_cast<const Desti_loc*>(
               &_Desti_loc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Desti_loc& a, Desti_loc& b) {
    a.Swap(&b);
  }
  inline void Swap(Desti_loc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Desti_loc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Desti_loc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Desti_loc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Desti_loc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Desti_loc& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Desti_loc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Desti_loc";
  }
  protected:
  explicit Desti_loc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required int64 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int64_t x() const;
  void set_x(int64_t value);
  private:
  int64_t _internal_x() const;
  void _internal_set_x(int64_t value);
  public:

  // required int64 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int64_t y() const;
  void set_y(int64_t value);
  private:
  int64_t _internal_y() const;
  void _internal_set_y(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Desti_loc)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t x_;
  int64_t y_;
  friend struct ::TableStruct_uta_2eproto;
};
// -------------------------------------------------------------------

class ATURequestPickUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ATURequestPickUp) */ {
 public:
  inline ATURequestPickUp() : ATURequestPickUp(nullptr) {}
  ~ATURequestPickUp() override;
  explicit PROTOBUF_CONSTEXPR ATURequestPickUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ATURequestPickUp(const ATURequestPickUp& from);
  ATURequestPickUp(ATURequestPickUp&& from) noexcept
    : ATURequestPickUp() {
    *this = ::std::move(from);
  }

  inline ATURequestPickUp& operator=(const ATURequestPickUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ATURequestPickUp& operator=(ATURequestPickUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ATURequestPickUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ATURequestPickUp* internal_default_instance() {
    return reinterpret_cast<const ATURequestPickUp*>(
               &_ATURequestPickUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ATURequestPickUp& a, ATURequestPickUp& b) {
    a.Swap(&b);
  }
  inline void Swap(ATURequestPickUp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ATURequestPickUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ATURequestPickUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ATURequestPickUp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ATURequestPickUp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ATURequestPickUp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ATURequestPickUp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ATURequestPickUp";
  }
  protected:
  explicit ATURequestPickUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductNameFieldNumber = 1,
    kUpsAccountFieldNumber = 3,
    kDestinationFieldNumber = 5,
    kPackageidFieldNumber = 2,
    kWhidFieldNumber = 4,
    kSeqnumFieldNumber = 6,
  };
  // required string product_name = 1;
  bool has_product_name() const;
  private:
  bool _internal_has_product_name() const;
  public:
  void clear_product_name();
  const std::string& product_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_name();
  PROTOBUF_NODISCARD std::string* release_product_name();
  void set_allocated_product_name(std::string* product_name);
  private:
  const std::string& _internal_product_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_name(const std::string& value);
  std::string* _internal_mutable_product_name();
  public:

  // optional string ups_account = 3;
  bool has_ups_account() const;
  private:
  bool _internal_has_ups_account() const;
  public:
  void clear_ups_account();
  const std::string& ups_account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ups_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ups_account();
  PROTOBUF_NODISCARD std::string* release_ups_account();
  void set_allocated_ups_account(std::string* ups_account);
  private:
  const std::string& _internal_ups_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ups_account(const std::string& value);
  std::string* _internal_mutable_ups_account();
  public:

  // required .Desti_loc destination = 5;
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const ::Desti_loc& destination() const;
  PROTOBUF_NODISCARD ::Desti_loc* release_destination();
  ::Desti_loc* mutable_destination();
  void set_allocated_destination(::Desti_loc* destination);
  private:
  const ::Desti_loc& _internal_destination() const;
  ::Desti_loc* _internal_mutable_destination();
  public:
  void unsafe_arena_set_allocated_destination(
      ::Desti_loc* destination);
  ::Desti_loc* unsafe_arena_release_destination();

  // required int64 packageid = 2;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  int64_t packageid() const;
  void set_packageid(int64_t value);
  private:
  int64_t _internal_packageid() const;
  void _internal_set_packageid(int64_t value);
  public:

  // required int64 whid = 4;
  bool has_whid() const;
  private:
  bool _internal_has_whid() const;
  public:
  void clear_whid();
  int64_t whid() const;
  void set_whid(int64_t value);
  private:
  int64_t _internal_whid() const;
  void _internal_set_whid(int64_t value);
  public:

  // required int64 seqnum = 6;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ATURequestPickUp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ups_account_;
  ::Desti_loc* destination_;
  int64_t packageid_;
  int64_t whid_;
  int64_t seqnum_;
  friend struct ::TableStruct_uta_2eproto;
};
// -------------------------------------------------------------------

class UTAArrived final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UTAArrived) */ {
 public:
  inline UTAArrived() : UTAArrived(nullptr) {}
  ~UTAArrived() override;
  explicit PROTOBUF_CONSTEXPR UTAArrived(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UTAArrived(const UTAArrived& from);
  UTAArrived(UTAArrived&& from) noexcept
    : UTAArrived() {
    *this = ::std::move(from);
  }

  inline UTAArrived& operator=(const UTAArrived& from) {
    CopyFrom(from);
    return *this;
  }
  inline UTAArrived& operator=(UTAArrived&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UTAArrived& default_instance() {
    return *internal_default_instance();
  }
  static inline const UTAArrived* internal_default_instance() {
    return reinterpret_cast<const UTAArrived*>(
               &_UTAArrived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UTAArrived& a, UTAArrived& b) {
    a.Swap(&b);
  }
  inline void Swap(UTAArrived* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UTAArrived* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UTAArrived* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UTAArrived>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UTAArrived& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UTAArrived& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UTAArrived* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UTAArrived";
  }
  protected:
  explicit UTAArrived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageidFieldNumber = 1,
    kTruckidFieldNumber = 2,
    kWhidFieldNumber = 3,
    kSeqnumFieldNumber = 4,
  };
  // repeated int64 packageid = 1;
  int packageid_size() const;
  private:
  int _internal_packageid_size() const;
  public:
  void clear_packageid();
  private:
  int64_t _internal_packageid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_packageid() const;
  void _internal_add_packageid(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_packageid();
  public:
  int64_t packageid(int index) const;
  void set_packageid(int index, int64_t value);
  void add_packageid(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      packageid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_packageid();

  // required int64 truckid = 2;
  bool has_truckid() const;
  private:
  bool _internal_has_truckid() const;
  public:
  void clear_truckid();
  int64_t truckid() const;
  void set_truckid(int64_t value);
  private:
  int64_t _internal_truckid() const;
  void _internal_set_truckid(int64_t value);
  public:

  // required int64 whid = 3;
  bool has_whid() const;
  private:
  bool _internal_has_whid() const;
  public:
  void clear_whid();
  int64_t whid() const;
  void set_whid(int64_t value);
  private:
  int64_t _internal_whid() const;
  void _internal_set_whid(int64_t value);
  public:

  // required int64 seqnum = 4;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:UTAArrived)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > packageid_;
  int64_t truckid_;
  int64_t whid_;
  int64_t seqnum_;
  friend struct ::TableStruct_uta_2eproto;
};
// -------------------------------------------------------------------

class ATULoaded final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ATULoaded) */ {
 public:
  inline ATULoaded() : ATULoaded(nullptr) {}
  ~ATULoaded() override;
  explicit PROTOBUF_CONSTEXPR ATULoaded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ATULoaded(const ATULoaded& from);
  ATULoaded(ATULoaded&& from) noexcept
    : ATULoaded() {
    *this = ::std::move(from);
  }

  inline ATULoaded& operator=(const ATULoaded& from) {
    CopyFrom(from);
    return *this;
  }
  inline ATULoaded& operator=(ATULoaded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ATULoaded& default_instance() {
    return *internal_default_instance();
  }
  static inline const ATULoaded* internal_default_instance() {
    return reinterpret_cast<const ATULoaded*>(
               &_ATULoaded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ATULoaded& a, ATULoaded& b) {
    a.Swap(&b);
  }
  inline void Swap(ATULoaded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ATULoaded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ATULoaded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ATULoaded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ATULoaded& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ATULoaded& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ATULoaded* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ATULoaded";
  }
  protected:
  explicit ATULoaded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageidFieldNumber = 1,
    kTruckidFieldNumber = 2,
    kSeqnumFieldNumber = 3,
  };
  // repeated int64 packageid = 1;
  int packageid_size() const;
  private:
  int _internal_packageid_size() const;
  public:
  void clear_packageid();
  private:
  int64_t _internal_packageid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_packageid() const;
  void _internal_add_packageid(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_packageid();
  public:
  int64_t packageid(int index) const;
  void set_packageid(int index, int64_t value);
  void add_packageid(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      packageid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_packageid();

  // required int64 truckid = 2;
  bool has_truckid() const;
  private:
  bool _internal_has_truckid() const;
  public:
  void clear_truckid();
  int64_t truckid() const;
  void set_truckid(int64_t value);
  private:
  int64_t _internal_truckid() const;
  void _internal_set_truckid(int64_t value);
  public:

  // required int64 seqnum = 3;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ATULoaded)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > packageid_;
  int64_t truckid_;
  int64_t seqnum_;
  friend struct ::TableStruct_uta_2eproto;
};
// -------------------------------------------------------------------

class UTAOutDelivery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UTAOutDelivery) */ {
 public:
  inline UTAOutDelivery() : UTAOutDelivery(nullptr) {}
  ~UTAOutDelivery() override;
  explicit PROTOBUF_CONSTEXPR UTAOutDelivery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UTAOutDelivery(const UTAOutDelivery& from);
  UTAOutDelivery(UTAOutDelivery&& from) noexcept
    : UTAOutDelivery() {
    *this = ::std::move(from);
  }

  inline UTAOutDelivery& operator=(const UTAOutDelivery& from) {
    CopyFrom(from);
    return *this;
  }
  inline UTAOutDelivery& operator=(UTAOutDelivery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UTAOutDelivery& default_instance() {
    return *internal_default_instance();
  }
  static inline const UTAOutDelivery* internal_default_instance() {
    return reinterpret_cast<const UTAOutDelivery*>(
               &_UTAOutDelivery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UTAOutDelivery& a, UTAOutDelivery& b) {
    a.Swap(&b);
  }
  inline void Swap(UTAOutDelivery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UTAOutDelivery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UTAOutDelivery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UTAOutDelivery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UTAOutDelivery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UTAOutDelivery& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UTAOutDelivery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UTAOutDelivery";
  }
  protected:
  explicit UTAOutDelivery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kSeqnumFieldNumber = 4,
  };
  // required int64 packageid = 1;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  int64_t packageid() const;
  void set_packageid(int64_t value);
  private:
  int64_t _internal_packageid() const;
  void _internal_set_packageid(int64_t value);
  public:

  // required int64 x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int64_t x() const;
  void set_x(int64_t value);
  private:
  int64_t _internal_x() const;
  void _internal_set_x(int64_t value);
  public:

  // required int64 y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int64_t y() const;
  void set_y(int64_t value);
  private:
  int64_t _internal_y() const;
  void _internal_set_y(int64_t value);
  public:

  // required int64 seqnum = 4;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:UTAOutDelivery)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t packageid_;
  int64_t x_;
  int64_t y_;
  int64_t seqnum_;
  friend struct ::TableStruct_uta_2eproto;
};
// -------------------------------------------------------------------

class UTADelivered final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UTADelivered) */ {
 public:
  inline UTADelivered() : UTADelivered(nullptr) {}
  ~UTADelivered() override;
  explicit PROTOBUF_CONSTEXPR UTADelivered(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UTADelivered(const UTADelivered& from);
  UTADelivered(UTADelivered&& from) noexcept
    : UTADelivered() {
    *this = ::std::move(from);
  }

  inline UTADelivered& operator=(const UTADelivered& from) {
    CopyFrom(from);
    return *this;
  }
  inline UTADelivered& operator=(UTADelivered&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UTADelivered& default_instance() {
    return *internal_default_instance();
  }
  static inline const UTADelivered* internal_default_instance() {
    return reinterpret_cast<const UTADelivered*>(
               &_UTADelivered_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UTADelivered& a, UTADelivered& b) {
    a.Swap(&b);
  }
  inline void Swap(UTADelivered* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UTADelivered* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UTADelivered* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UTADelivered>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UTADelivered& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UTADelivered& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UTADelivered* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UTADelivered";
  }
  protected:
  explicit UTADelivered(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageidFieldNumber = 1,
    kSeqnumFieldNumber = 2,
  };
  // required int64 packageid = 1;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  int64_t packageid() const;
  void set_packageid(int64_t value);
  private:
  int64_t _internal_packageid() const;
  void _internal_set_packageid(int64_t value);
  public:

  // required int64 seqnum = 2;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:UTADelivered)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t packageid_;
  int64_t seqnum_;
  friend struct ::TableStruct_uta_2eproto;
};
// -------------------------------------------------------------------

class AUErr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUErr) */ {
 public:
  inline AUErr() : AUErr(nullptr) {}
  ~AUErr() override;
  explicit PROTOBUF_CONSTEXPR AUErr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AUErr(const AUErr& from);
  AUErr(AUErr&& from) noexcept
    : AUErr() {
    *this = ::std::move(from);
  }

  inline AUErr& operator=(const AUErr& from) {
    CopyFrom(from);
    return *this;
  }
  inline AUErr& operator=(AUErr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AUErr& default_instance() {
    return *internal_default_instance();
  }
  static inline const AUErr* internal_default_instance() {
    return reinterpret_cast<const AUErr*>(
               &_AUErr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AUErr& a, AUErr& b) {
    a.Swap(&b);
  }
  inline void Swap(AUErr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AUErr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AUErr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AUErr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AUErr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AUErr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AUErr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUErr";
  }
  protected:
  explicit AUErr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
    kOriginseqnumFieldNumber = 2,
    kSeqnumFieldNumber = 3,
  };
  // required string err = 1;
  bool has_err() const;
  private:
  bool _internal_has_err() const;
  public:
  void clear_err();
  const std::string& err() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err();
  PROTOBUF_NODISCARD std::string* release_err();
  void set_allocated_err(std::string* err);
  private:
  const std::string& _internal_err() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err(const std::string& value);
  std::string* _internal_mutable_err();
  public:

  // required int64 originseqnum = 2;
  bool has_originseqnum() const;
  private:
  bool _internal_has_originseqnum() const;
  public:
  void clear_originseqnum();
  int64_t originseqnum() const;
  void set_originseqnum(int64_t value);
  private:
  int64_t _internal_originseqnum() const;
  void _internal_set_originseqnum(int64_t value);
  public:

  // required int64 seqnum = 3;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AUErr)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_;
  int64_t originseqnum_;
  int64_t seqnum_;
  friend struct ::TableStruct_uta_2eproto;
};
// -------------------------------------------------------------------

class ATUCommands final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ATUCommands) */ {
 public:
  inline ATUCommands() : ATUCommands(nullptr) {}
  ~ATUCommands() override;
  explicit PROTOBUF_CONSTEXPR ATUCommands(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ATUCommands(const ATUCommands& from);
  ATUCommands(ATUCommands&& from) noexcept
    : ATUCommands() {
    *this = ::std::move(from);
  }

  inline ATUCommands& operator=(const ATUCommands& from) {
    CopyFrom(from);
    return *this;
  }
  inline ATUCommands& operator=(ATUCommands&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ATUCommands& default_instance() {
    return *internal_default_instance();
  }
  static inline const ATUCommands* internal_default_instance() {
    return reinterpret_cast<const ATUCommands*>(
               &_ATUCommands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ATUCommands& a, ATUCommands& b) {
    a.Swap(&b);
  }
  inline void Swap(ATUCommands* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ATUCommands* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ATUCommands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ATUCommands>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ATUCommands& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ATUCommands& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ATUCommands* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ATUCommands";
  }
  protected:
  explicit ATUCommands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopickupFieldNumber = 1,
    kLoadedFieldNumber = 2,
    kErrFieldNumber = 3,
    kAcksFieldNumber = 4,
  };
  // repeated .ATURequestPickUp topickup = 1;
  int topickup_size() const;
  private:
  int _internal_topickup_size() const;
  public:
  void clear_topickup();
  ::ATURequestPickUp* mutable_topickup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ATURequestPickUp >*
      mutable_topickup();
  private:
  const ::ATURequestPickUp& _internal_topickup(int index) const;
  ::ATURequestPickUp* _internal_add_topickup();
  public:
  const ::ATURequestPickUp& topickup(int index) const;
  ::ATURequestPickUp* add_topickup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ATURequestPickUp >&
      topickup() const;

  // repeated .ATULoaded loaded = 2;
  int loaded_size() const;
  private:
  int _internal_loaded_size() const;
  public:
  void clear_loaded();
  ::ATULoaded* mutable_loaded(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ATULoaded >*
      mutable_loaded();
  private:
  const ::ATULoaded& _internal_loaded(int index) const;
  ::ATULoaded* _internal_add_loaded();
  public:
  const ::ATULoaded& loaded(int index) const;
  ::ATULoaded* add_loaded();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ATULoaded >&
      loaded() const;

  // repeated .AUErr err = 3;
  int err_size() const;
  private:
  int _internal_err_size() const;
  public:
  void clear_err();
  ::AUErr* mutable_err(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUErr >*
      mutable_err();
  private:
  const ::AUErr& _internal_err(int index) const;
  ::AUErr* _internal_add_err();
  public:
  const ::AUErr& err(int index) const;
  ::AUErr* add_err();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUErr >&
      err() const;

  // repeated int64 acks = 4;
  int acks_size() const;
  private:
  int _internal_acks_size() const;
  public:
  void clear_acks();
  private:
  int64_t _internal_acks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_acks() const;
  void _internal_add_acks(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_acks();
  public:
  int64_t acks(int index) const;
  void set_acks(int index, int64_t value);
  void add_acks(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      acks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_acks();

  // @@protoc_insertion_point(class_scope:ATUCommands)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ATURequestPickUp > topickup_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ATULoaded > loaded_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUErr > err_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > acks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_uta_2eproto;
};
// -------------------------------------------------------------------

class UTACommands final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UTACommands) */ {
 public:
  inline UTACommands() : UTACommands(nullptr) {}
  ~UTACommands() override;
  explicit PROTOBUF_CONSTEXPR UTACommands(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UTACommands(const UTACommands& from);
  UTACommands(UTACommands&& from) noexcept
    : UTACommands() {
    *this = ::std::move(from);
  }

  inline UTACommands& operator=(const UTACommands& from) {
    CopyFrom(from);
    return *this;
  }
  inline UTACommands& operator=(UTACommands&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UTACommands& default_instance() {
    return *internal_default_instance();
  }
  static inline const UTACommands* internal_default_instance() {
    return reinterpret_cast<const UTACommands*>(
               &_UTACommands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UTACommands& a, UTACommands& b) {
    a.Swap(&b);
  }
  inline void Swap(UTACommands* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UTACommands* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UTACommands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UTACommands>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UTACommands& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UTACommands& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UTACommands* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UTACommands";
  }
  protected:
  explicit UTACommands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArriveFieldNumber = 1,
    kTodeliverFieldNumber = 2,
    kDeliveredFieldNumber = 3,
    kErrFieldNumber = 4,
    kAcksFieldNumber = 5,
  };
  // repeated .UTAArrived arrive = 1;
  int arrive_size() const;
  private:
  int _internal_arrive_size() const;
  public:
  void clear_arrive();
  ::UTAArrived* mutable_arrive(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTAArrived >*
      mutable_arrive();
  private:
  const ::UTAArrived& _internal_arrive(int index) const;
  ::UTAArrived* _internal_add_arrive();
  public:
  const ::UTAArrived& arrive(int index) const;
  ::UTAArrived* add_arrive();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTAArrived >&
      arrive() const;

  // repeated .UTAOutDelivery todeliver = 2;
  int todeliver_size() const;
  private:
  int _internal_todeliver_size() const;
  public:
  void clear_todeliver();
  ::UTAOutDelivery* mutable_todeliver(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTAOutDelivery >*
      mutable_todeliver();
  private:
  const ::UTAOutDelivery& _internal_todeliver(int index) const;
  ::UTAOutDelivery* _internal_add_todeliver();
  public:
  const ::UTAOutDelivery& todeliver(int index) const;
  ::UTAOutDelivery* add_todeliver();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTAOutDelivery >&
      todeliver() const;

  // repeated .UTADelivered delivered = 3;
  int delivered_size() const;
  private:
  int _internal_delivered_size() const;
  public:
  void clear_delivered();
  ::UTADelivered* mutable_delivered(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTADelivered >*
      mutable_delivered();
  private:
  const ::UTADelivered& _internal_delivered(int index) const;
  ::UTADelivered* _internal_add_delivered();
  public:
  const ::UTADelivered& delivered(int index) const;
  ::UTADelivered* add_delivered();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTADelivered >&
      delivered() const;

  // repeated .AUErr err = 4;
  int err_size() const;
  private:
  int _internal_err_size() const;
  public:
  void clear_err();
  ::AUErr* mutable_err(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUErr >*
      mutable_err();
  private:
  const ::AUErr& _internal_err(int index) const;
  ::AUErr* _internal_add_err();
  public:
  const ::AUErr& err(int index) const;
  ::AUErr* add_err();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUErr >&
      err() const;

  // repeated int64 acks = 5;
  int acks_size() const;
  private:
  int _internal_acks_size() const;
  public:
  void clear_acks();
  private:
  int64_t _internal_acks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_acks() const;
  void _internal_add_acks(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_acks();
  public:
  int64_t acks(int index) const;
  void set_acks(int index, int64_t value);
  void add_acks(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      acks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_acks();

  // @@protoc_insertion_point(class_scope:UTACommands)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTAArrived > arrive_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTAOutDelivery > todeliver_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTADelivered > delivered_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUErr > err_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > acks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_uta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UTAConnect

// required int64 worldid = 1;
inline bool UTAConnect::_internal_has_worldid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UTAConnect::has_worldid() const {
  return _internal_has_worldid();
}
inline void UTAConnect::clear_worldid() {
  worldid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UTAConnect::_internal_worldid() const {
  return worldid_;
}
inline int64_t UTAConnect::worldid() const {
  // @@protoc_insertion_point(field_get:UTAConnect.worldid)
  return _internal_worldid();
}
inline void UTAConnect::_internal_set_worldid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  worldid_ = value;
}
inline void UTAConnect::set_worldid(int64_t value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:UTAConnect.worldid)
}

// -------------------------------------------------------------------

// AUConnected

// required int64 worldid = 1;
inline bool AUConnected::_internal_has_worldid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AUConnected::has_worldid() const {
  return _internal_has_worldid();
}
inline void AUConnected::clear_worldid() {
  worldid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t AUConnected::_internal_worldid() const {
  return worldid_;
}
inline int64_t AUConnected::worldid() const {
  // @@protoc_insertion_point(field_get:AUConnected.worldid)
  return _internal_worldid();
}
inline void AUConnected::_internal_set_worldid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  worldid_ = value;
}
inline void AUConnected::set_worldid(int64_t value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:AUConnected.worldid)
}

// -------------------------------------------------------------------

// Desti_loc

// required int64 x = 1;
inline bool Desti_loc::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Desti_loc::has_x() const {
  return _internal_has_x();
}
inline void Desti_loc::clear_x() {
  x_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t Desti_loc::_internal_x() const {
  return x_;
}
inline int64_t Desti_loc::x() const {
  // @@protoc_insertion_point(field_get:Desti_loc.x)
  return _internal_x();
}
inline void Desti_loc::_internal_set_x(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Desti_loc::set_x(int64_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Desti_loc.x)
}

// required int64 y = 2;
inline bool Desti_loc::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Desti_loc::has_y() const {
  return _internal_has_y();
}
inline void Desti_loc::clear_y() {
  y_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t Desti_loc::_internal_y() const {
  return y_;
}
inline int64_t Desti_loc::y() const {
  // @@protoc_insertion_point(field_get:Desti_loc.y)
  return _internal_y();
}
inline void Desti_loc::_internal_set_y(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Desti_loc::set_y(int64_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Desti_loc.y)
}

// -------------------------------------------------------------------

// ATURequestPickUp

// required string product_name = 1;
inline bool ATURequestPickUp::_internal_has_product_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ATURequestPickUp::has_product_name() const {
  return _internal_has_product_name();
}
inline void ATURequestPickUp::clear_product_name() {
  product_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ATURequestPickUp::product_name() const {
  // @@protoc_insertion_point(field_get:ATURequestPickUp.product_name)
  return _internal_product_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ATURequestPickUp::set_product_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 product_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ATURequestPickUp.product_name)
}
inline std::string* ATURequestPickUp::mutable_product_name() {
  std::string* _s = _internal_mutable_product_name();
  // @@protoc_insertion_point(field_mutable:ATURequestPickUp.product_name)
  return _s;
}
inline const std::string& ATURequestPickUp::_internal_product_name() const {
  return product_name_.Get();
}
inline void ATURequestPickUp::_internal_set_product_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  product_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ATURequestPickUp::_internal_mutable_product_name() {
  _has_bits_[0] |= 0x00000001u;
  return product_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ATURequestPickUp::release_product_name() {
  // @@protoc_insertion_point(field_release:ATURequestPickUp.product_name)
  if (!_internal_has_product_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = product_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_name_.IsDefault()) {
    product_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ATURequestPickUp::set_allocated_product_name(std::string* product_name) {
  if (product_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  product_name_.SetAllocated(product_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_name_.IsDefault()) {
    product_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ATURequestPickUp.product_name)
}

// required int64 packageid = 2;
inline bool ATURequestPickUp::_internal_has_packageid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ATURequestPickUp::has_packageid() const {
  return _internal_has_packageid();
}
inline void ATURequestPickUp::clear_packageid() {
  packageid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t ATURequestPickUp::_internal_packageid() const {
  return packageid_;
}
inline int64_t ATURequestPickUp::packageid() const {
  // @@protoc_insertion_point(field_get:ATURequestPickUp.packageid)
  return _internal_packageid();
}
inline void ATURequestPickUp::_internal_set_packageid(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  packageid_ = value;
}
inline void ATURequestPickUp::set_packageid(int64_t value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:ATURequestPickUp.packageid)
}

// optional string ups_account = 3;
inline bool ATURequestPickUp::_internal_has_ups_account() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ATURequestPickUp::has_ups_account() const {
  return _internal_has_ups_account();
}
inline void ATURequestPickUp::clear_ups_account() {
  ups_account_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ATURequestPickUp::ups_account() const {
  // @@protoc_insertion_point(field_get:ATURequestPickUp.ups_account)
  return _internal_ups_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ATURequestPickUp::set_ups_account(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 ups_account_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ATURequestPickUp.ups_account)
}
inline std::string* ATURequestPickUp::mutable_ups_account() {
  std::string* _s = _internal_mutable_ups_account();
  // @@protoc_insertion_point(field_mutable:ATURequestPickUp.ups_account)
  return _s;
}
inline const std::string& ATURequestPickUp::_internal_ups_account() const {
  return ups_account_.Get();
}
inline void ATURequestPickUp::_internal_set_ups_account(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ups_account_.Set(value, GetArenaForAllocation());
}
inline std::string* ATURequestPickUp::_internal_mutable_ups_account() {
  _has_bits_[0] |= 0x00000002u;
  return ups_account_.Mutable(GetArenaForAllocation());
}
inline std::string* ATURequestPickUp::release_ups_account() {
  // @@protoc_insertion_point(field_release:ATURequestPickUp.ups_account)
  if (!_internal_has_ups_account()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = ups_account_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ups_account_.IsDefault()) {
    ups_account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ATURequestPickUp::set_allocated_ups_account(std::string* ups_account) {
  if (ups_account != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ups_account_.SetAllocated(ups_account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ups_account_.IsDefault()) {
    ups_account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ATURequestPickUp.ups_account)
}

// required int64 whid = 4;
inline bool ATURequestPickUp::_internal_has_whid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ATURequestPickUp::has_whid() const {
  return _internal_has_whid();
}
inline void ATURequestPickUp::clear_whid() {
  whid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t ATURequestPickUp::_internal_whid() const {
  return whid_;
}
inline int64_t ATURequestPickUp::whid() const {
  // @@protoc_insertion_point(field_get:ATURequestPickUp.whid)
  return _internal_whid();
}
inline void ATURequestPickUp::_internal_set_whid(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  whid_ = value;
}
inline void ATURequestPickUp::set_whid(int64_t value) {
  _internal_set_whid(value);
  // @@protoc_insertion_point(field_set:ATURequestPickUp.whid)
}

// required .Desti_loc destination = 5;
inline bool ATURequestPickUp::_internal_has_destination() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || destination_ != nullptr);
  return value;
}
inline bool ATURequestPickUp::has_destination() const {
  return _internal_has_destination();
}
inline void ATURequestPickUp::clear_destination() {
  if (destination_ != nullptr) destination_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Desti_loc& ATURequestPickUp::_internal_destination() const {
  const ::Desti_loc* p = destination_;
  return p != nullptr ? *p : reinterpret_cast<const ::Desti_loc&>(
      ::_Desti_loc_default_instance_);
}
inline const ::Desti_loc& ATURequestPickUp::destination() const {
  // @@protoc_insertion_point(field_get:ATURequestPickUp.destination)
  return _internal_destination();
}
inline void ATURequestPickUp::unsafe_arena_set_allocated_destination(
    ::Desti_loc* destination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_);
  }
  destination_ = destination;
  if (destination) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ATURequestPickUp.destination)
}
inline ::Desti_loc* ATURequestPickUp::release_destination() {
  _has_bits_[0] &= ~0x00000004u;
  ::Desti_loc* temp = destination_;
  destination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Desti_loc* ATURequestPickUp::unsafe_arena_release_destination() {
  // @@protoc_insertion_point(field_release:ATURequestPickUp.destination)
  _has_bits_[0] &= ~0x00000004u;
  ::Desti_loc* temp = destination_;
  destination_ = nullptr;
  return temp;
}
inline ::Desti_loc* ATURequestPickUp::_internal_mutable_destination() {
  _has_bits_[0] |= 0x00000004u;
  if (destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::Desti_loc>(GetArenaForAllocation());
    destination_ = p;
  }
  return destination_;
}
inline ::Desti_loc* ATURequestPickUp::mutable_destination() {
  ::Desti_loc* _msg = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:ATURequestPickUp.destination)
  return _msg;
}
inline void ATURequestPickUp::set_allocated_destination(::Desti_loc* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete destination_;
  }
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destination);
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:ATURequestPickUp.destination)
}

// required int64 seqnum = 6;
inline bool ATURequestPickUp::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ATURequestPickUp::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void ATURequestPickUp::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t ATURequestPickUp::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t ATURequestPickUp::seqnum() const {
  // @@protoc_insertion_point(field_get:ATURequestPickUp.seqnum)
  return _internal_seqnum();
}
inline void ATURequestPickUp::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  seqnum_ = value;
}
inline void ATURequestPickUp::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:ATURequestPickUp.seqnum)
}

// -------------------------------------------------------------------

// UTAArrived

// repeated int64 packageid = 1;
inline int UTAArrived::_internal_packageid_size() const {
  return packageid_.size();
}
inline int UTAArrived::packageid_size() const {
  return _internal_packageid_size();
}
inline void UTAArrived::clear_packageid() {
  packageid_.Clear();
}
inline int64_t UTAArrived::_internal_packageid(int index) const {
  return packageid_.Get(index);
}
inline int64_t UTAArrived::packageid(int index) const {
  // @@protoc_insertion_point(field_get:UTAArrived.packageid)
  return _internal_packageid(index);
}
inline void UTAArrived::set_packageid(int index, int64_t value) {
  packageid_.Set(index, value);
  // @@protoc_insertion_point(field_set:UTAArrived.packageid)
}
inline void UTAArrived::_internal_add_packageid(int64_t value) {
  packageid_.Add(value);
}
inline void UTAArrived::add_packageid(int64_t value) {
  _internal_add_packageid(value);
  // @@protoc_insertion_point(field_add:UTAArrived.packageid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UTAArrived::_internal_packageid() const {
  return packageid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UTAArrived::packageid() const {
  // @@protoc_insertion_point(field_list:UTAArrived.packageid)
  return _internal_packageid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UTAArrived::_internal_mutable_packageid() {
  return &packageid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UTAArrived::mutable_packageid() {
  // @@protoc_insertion_point(field_mutable_list:UTAArrived.packageid)
  return _internal_mutable_packageid();
}

// required int64 truckid = 2;
inline bool UTAArrived::_internal_has_truckid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UTAArrived::has_truckid() const {
  return _internal_has_truckid();
}
inline void UTAArrived::clear_truckid() {
  truckid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UTAArrived::_internal_truckid() const {
  return truckid_;
}
inline int64_t UTAArrived::truckid() const {
  // @@protoc_insertion_point(field_get:UTAArrived.truckid)
  return _internal_truckid();
}
inline void UTAArrived::_internal_set_truckid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  truckid_ = value;
}
inline void UTAArrived::set_truckid(int64_t value) {
  _internal_set_truckid(value);
  // @@protoc_insertion_point(field_set:UTAArrived.truckid)
}

// required int64 whid = 3;
inline bool UTAArrived::_internal_has_whid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UTAArrived::has_whid() const {
  return _internal_has_whid();
}
inline void UTAArrived::clear_whid() {
  whid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t UTAArrived::_internal_whid() const {
  return whid_;
}
inline int64_t UTAArrived::whid() const {
  // @@protoc_insertion_point(field_get:UTAArrived.whid)
  return _internal_whid();
}
inline void UTAArrived::_internal_set_whid(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  whid_ = value;
}
inline void UTAArrived::set_whid(int64_t value) {
  _internal_set_whid(value);
  // @@protoc_insertion_point(field_set:UTAArrived.whid)
}

// required int64 seqnum = 4;
inline bool UTAArrived::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UTAArrived::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UTAArrived::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t UTAArrived::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UTAArrived::seqnum() const {
  // @@protoc_insertion_point(field_get:UTAArrived.seqnum)
  return _internal_seqnum();
}
inline void UTAArrived::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  seqnum_ = value;
}
inline void UTAArrived::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UTAArrived.seqnum)
}

// -------------------------------------------------------------------

// ATULoaded

// repeated int64 packageid = 1;
inline int ATULoaded::_internal_packageid_size() const {
  return packageid_.size();
}
inline int ATULoaded::packageid_size() const {
  return _internal_packageid_size();
}
inline void ATULoaded::clear_packageid() {
  packageid_.Clear();
}
inline int64_t ATULoaded::_internal_packageid(int index) const {
  return packageid_.Get(index);
}
inline int64_t ATULoaded::packageid(int index) const {
  // @@protoc_insertion_point(field_get:ATULoaded.packageid)
  return _internal_packageid(index);
}
inline void ATULoaded::set_packageid(int index, int64_t value) {
  packageid_.Set(index, value);
  // @@protoc_insertion_point(field_set:ATULoaded.packageid)
}
inline void ATULoaded::_internal_add_packageid(int64_t value) {
  packageid_.Add(value);
}
inline void ATULoaded::add_packageid(int64_t value) {
  _internal_add_packageid(value);
  // @@protoc_insertion_point(field_add:ATULoaded.packageid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ATULoaded::_internal_packageid() const {
  return packageid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ATULoaded::packageid() const {
  // @@protoc_insertion_point(field_list:ATULoaded.packageid)
  return _internal_packageid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ATULoaded::_internal_mutable_packageid() {
  return &packageid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ATULoaded::mutable_packageid() {
  // @@protoc_insertion_point(field_mutable_list:ATULoaded.packageid)
  return _internal_mutable_packageid();
}

// required int64 truckid = 2;
inline bool ATULoaded::_internal_has_truckid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ATULoaded::has_truckid() const {
  return _internal_has_truckid();
}
inline void ATULoaded::clear_truckid() {
  truckid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t ATULoaded::_internal_truckid() const {
  return truckid_;
}
inline int64_t ATULoaded::truckid() const {
  // @@protoc_insertion_point(field_get:ATULoaded.truckid)
  return _internal_truckid();
}
inline void ATULoaded::_internal_set_truckid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  truckid_ = value;
}
inline void ATULoaded::set_truckid(int64_t value) {
  _internal_set_truckid(value);
  // @@protoc_insertion_point(field_set:ATULoaded.truckid)
}

// required int64 seqnum = 3;
inline bool ATULoaded::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ATULoaded::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void ATULoaded::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t ATULoaded::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t ATULoaded::seqnum() const {
  // @@protoc_insertion_point(field_get:ATULoaded.seqnum)
  return _internal_seqnum();
}
inline void ATULoaded::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  seqnum_ = value;
}
inline void ATULoaded::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:ATULoaded.seqnum)
}

// -------------------------------------------------------------------

// UTAOutDelivery

// required int64 packageid = 1;
inline bool UTAOutDelivery::_internal_has_packageid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UTAOutDelivery::has_packageid() const {
  return _internal_has_packageid();
}
inline void UTAOutDelivery::clear_packageid() {
  packageid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UTAOutDelivery::_internal_packageid() const {
  return packageid_;
}
inline int64_t UTAOutDelivery::packageid() const {
  // @@protoc_insertion_point(field_get:UTAOutDelivery.packageid)
  return _internal_packageid();
}
inline void UTAOutDelivery::_internal_set_packageid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  packageid_ = value;
}
inline void UTAOutDelivery::set_packageid(int64_t value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:UTAOutDelivery.packageid)
}

// required int64 x = 2;
inline bool UTAOutDelivery::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UTAOutDelivery::has_x() const {
  return _internal_has_x();
}
inline void UTAOutDelivery::clear_x() {
  x_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t UTAOutDelivery::_internal_x() const {
  return x_;
}
inline int64_t UTAOutDelivery::x() const {
  // @@protoc_insertion_point(field_get:UTAOutDelivery.x)
  return _internal_x();
}
inline void UTAOutDelivery::_internal_set_x(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void UTAOutDelivery::set_x(int64_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:UTAOutDelivery.x)
}

// required int64 y = 3;
inline bool UTAOutDelivery::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UTAOutDelivery::has_y() const {
  return _internal_has_y();
}
inline void UTAOutDelivery::clear_y() {
  y_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t UTAOutDelivery::_internal_y() const {
  return y_;
}
inline int64_t UTAOutDelivery::y() const {
  // @@protoc_insertion_point(field_get:UTAOutDelivery.y)
  return _internal_y();
}
inline void UTAOutDelivery::_internal_set_y(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void UTAOutDelivery::set_y(int64_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:UTAOutDelivery.y)
}

// required int64 seqnum = 4;
inline bool UTAOutDelivery::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UTAOutDelivery::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UTAOutDelivery::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t UTAOutDelivery::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UTAOutDelivery::seqnum() const {
  // @@protoc_insertion_point(field_get:UTAOutDelivery.seqnum)
  return _internal_seqnum();
}
inline void UTAOutDelivery::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  seqnum_ = value;
}
inline void UTAOutDelivery::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UTAOutDelivery.seqnum)
}

// -------------------------------------------------------------------

// UTADelivered

// required int64 packageid = 1;
inline bool UTADelivered::_internal_has_packageid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UTADelivered::has_packageid() const {
  return _internal_has_packageid();
}
inline void UTADelivered::clear_packageid() {
  packageid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UTADelivered::_internal_packageid() const {
  return packageid_;
}
inline int64_t UTADelivered::packageid() const {
  // @@protoc_insertion_point(field_get:UTADelivered.packageid)
  return _internal_packageid();
}
inline void UTADelivered::_internal_set_packageid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  packageid_ = value;
}
inline void UTADelivered::set_packageid(int64_t value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:UTADelivered.packageid)
}

// required int64 seqnum = 2;
inline bool UTADelivered::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UTADelivered::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UTADelivered::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t UTADelivered::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UTADelivered::seqnum() const {
  // @@protoc_insertion_point(field_get:UTADelivered.seqnum)
  return _internal_seqnum();
}
inline void UTADelivered::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  seqnum_ = value;
}
inline void UTADelivered::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UTADelivered.seqnum)
}

// -------------------------------------------------------------------

// AUErr

// required string err = 1;
inline bool AUErr::_internal_has_err() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AUErr::has_err() const {
  return _internal_has_err();
}
inline void AUErr::clear_err() {
  err_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AUErr::err() const {
  // @@protoc_insertion_point(field_get:AUErr.err)
  return _internal_err();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AUErr::set_err(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 err_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AUErr.err)
}
inline std::string* AUErr::mutable_err() {
  std::string* _s = _internal_mutable_err();
  // @@protoc_insertion_point(field_mutable:AUErr.err)
  return _s;
}
inline const std::string& AUErr::_internal_err() const {
  return err_.Get();
}
inline void AUErr::_internal_set_err(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  err_.Set(value, GetArenaForAllocation());
}
inline std::string* AUErr::_internal_mutable_err() {
  _has_bits_[0] |= 0x00000001u;
  return err_.Mutable(GetArenaForAllocation());
}
inline std::string* AUErr::release_err() {
  // @@protoc_insertion_point(field_release:AUErr.err)
  if (!_internal_has_err()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = err_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_.IsDefault()) {
    err_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AUErr::set_allocated_err(std::string* err) {
  if (err != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  err_.SetAllocated(err, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_.IsDefault()) {
    err_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AUErr.err)
}

// required int64 originseqnum = 2;
inline bool AUErr::_internal_has_originseqnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AUErr::has_originseqnum() const {
  return _internal_has_originseqnum();
}
inline void AUErr::clear_originseqnum() {
  originseqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t AUErr::_internal_originseqnum() const {
  return originseqnum_;
}
inline int64_t AUErr::originseqnum() const {
  // @@protoc_insertion_point(field_get:AUErr.originseqnum)
  return _internal_originseqnum();
}
inline void AUErr::_internal_set_originseqnum(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  originseqnum_ = value;
}
inline void AUErr::set_originseqnum(int64_t value) {
  _internal_set_originseqnum(value);
  // @@protoc_insertion_point(field_set:AUErr.originseqnum)
}

// required int64 seqnum = 3;
inline bool AUErr::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AUErr::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void AUErr::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t AUErr::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t AUErr::seqnum() const {
  // @@protoc_insertion_point(field_get:AUErr.seqnum)
  return _internal_seqnum();
}
inline void AUErr::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  seqnum_ = value;
}
inline void AUErr::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:AUErr.seqnum)
}

// -------------------------------------------------------------------

// ATUCommands

// repeated .ATURequestPickUp topickup = 1;
inline int ATUCommands::_internal_topickup_size() const {
  return topickup_.size();
}
inline int ATUCommands::topickup_size() const {
  return _internal_topickup_size();
}
inline void ATUCommands::clear_topickup() {
  topickup_.Clear();
}
inline ::ATURequestPickUp* ATUCommands::mutable_topickup(int index) {
  // @@protoc_insertion_point(field_mutable:ATUCommands.topickup)
  return topickup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ATURequestPickUp >*
ATUCommands::mutable_topickup() {
  // @@protoc_insertion_point(field_mutable_list:ATUCommands.topickup)
  return &topickup_;
}
inline const ::ATURequestPickUp& ATUCommands::_internal_topickup(int index) const {
  return topickup_.Get(index);
}
inline const ::ATURequestPickUp& ATUCommands::topickup(int index) const {
  // @@protoc_insertion_point(field_get:ATUCommands.topickup)
  return _internal_topickup(index);
}
inline ::ATURequestPickUp* ATUCommands::_internal_add_topickup() {
  return topickup_.Add();
}
inline ::ATURequestPickUp* ATUCommands::add_topickup() {
  ::ATURequestPickUp* _add = _internal_add_topickup();
  // @@protoc_insertion_point(field_add:ATUCommands.topickup)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ATURequestPickUp >&
ATUCommands::topickup() const {
  // @@protoc_insertion_point(field_list:ATUCommands.topickup)
  return topickup_;
}

// repeated .ATULoaded loaded = 2;
inline int ATUCommands::_internal_loaded_size() const {
  return loaded_.size();
}
inline int ATUCommands::loaded_size() const {
  return _internal_loaded_size();
}
inline void ATUCommands::clear_loaded() {
  loaded_.Clear();
}
inline ::ATULoaded* ATUCommands::mutable_loaded(int index) {
  // @@protoc_insertion_point(field_mutable:ATUCommands.loaded)
  return loaded_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ATULoaded >*
ATUCommands::mutable_loaded() {
  // @@protoc_insertion_point(field_mutable_list:ATUCommands.loaded)
  return &loaded_;
}
inline const ::ATULoaded& ATUCommands::_internal_loaded(int index) const {
  return loaded_.Get(index);
}
inline const ::ATULoaded& ATUCommands::loaded(int index) const {
  // @@protoc_insertion_point(field_get:ATUCommands.loaded)
  return _internal_loaded(index);
}
inline ::ATULoaded* ATUCommands::_internal_add_loaded() {
  return loaded_.Add();
}
inline ::ATULoaded* ATUCommands::add_loaded() {
  ::ATULoaded* _add = _internal_add_loaded();
  // @@protoc_insertion_point(field_add:ATUCommands.loaded)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ATULoaded >&
ATUCommands::loaded() const {
  // @@protoc_insertion_point(field_list:ATUCommands.loaded)
  return loaded_;
}

// repeated .AUErr err = 3;
inline int ATUCommands::_internal_err_size() const {
  return err_.size();
}
inline int ATUCommands::err_size() const {
  return _internal_err_size();
}
inline void ATUCommands::clear_err() {
  err_.Clear();
}
inline ::AUErr* ATUCommands::mutable_err(int index) {
  // @@protoc_insertion_point(field_mutable:ATUCommands.err)
  return err_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUErr >*
ATUCommands::mutable_err() {
  // @@protoc_insertion_point(field_mutable_list:ATUCommands.err)
  return &err_;
}
inline const ::AUErr& ATUCommands::_internal_err(int index) const {
  return err_.Get(index);
}
inline const ::AUErr& ATUCommands::err(int index) const {
  // @@protoc_insertion_point(field_get:ATUCommands.err)
  return _internal_err(index);
}
inline ::AUErr* ATUCommands::_internal_add_err() {
  return err_.Add();
}
inline ::AUErr* ATUCommands::add_err() {
  ::AUErr* _add = _internal_add_err();
  // @@protoc_insertion_point(field_add:ATUCommands.err)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUErr >&
ATUCommands::err() const {
  // @@protoc_insertion_point(field_list:ATUCommands.err)
  return err_;
}

// repeated int64 acks = 4;
inline int ATUCommands::_internal_acks_size() const {
  return acks_.size();
}
inline int ATUCommands::acks_size() const {
  return _internal_acks_size();
}
inline void ATUCommands::clear_acks() {
  acks_.Clear();
}
inline int64_t ATUCommands::_internal_acks(int index) const {
  return acks_.Get(index);
}
inline int64_t ATUCommands::acks(int index) const {
  // @@protoc_insertion_point(field_get:ATUCommands.acks)
  return _internal_acks(index);
}
inline void ATUCommands::set_acks(int index, int64_t value) {
  acks_.Set(index, value);
  // @@protoc_insertion_point(field_set:ATUCommands.acks)
}
inline void ATUCommands::_internal_add_acks(int64_t value) {
  acks_.Add(value);
}
inline void ATUCommands::add_acks(int64_t value) {
  _internal_add_acks(value);
  // @@protoc_insertion_point(field_add:ATUCommands.acks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ATUCommands::_internal_acks() const {
  return acks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ATUCommands::acks() const {
  // @@protoc_insertion_point(field_list:ATUCommands.acks)
  return _internal_acks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ATUCommands::_internal_mutable_acks() {
  return &acks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ATUCommands::mutable_acks() {
  // @@protoc_insertion_point(field_mutable_list:ATUCommands.acks)
  return _internal_mutable_acks();
}

// -------------------------------------------------------------------

// UTACommands

// repeated .UTAArrived arrive = 1;
inline int UTACommands::_internal_arrive_size() const {
  return arrive_.size();
}
inline int UTACommands::arrive_size() const {
  return _internal_arrive_size();
}
inline void UTACommands::clear_arrive() {
  arrive_.Clear();
}
inline ::UTAArrived* UTACommands::mutable_arrive(int index) {
  // @@protoc_insertion_point(field_mutable:UTACommands.arrive)
  return arrive_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTAArrived >*
UTACommands::mutable_arrive() {
  // @@protoc_insertion_point(field_mutable_list:UTACommands.arrive)
  return &arrive_;
}
inline const ::UTAArrived& UTACommands::_internal_arrive(int index) const {
  return arrive_.Get(index);
}
inline const ::UTAArrived& UTACommands::arrive(int index) const {
  // @@protoc_insertion_point(field_get:UTACommands.arrive)
  return _internal_arrive(index);
}
inline ::UTAArrived* UTACommands::_internal_add_arrive() {
  return arrive_.Add();
}
inline ::UTAArrived* UTACommands::add_arrive() {
  ::UTAArrived* _add = _internal_add_arrive();
  // @@protoc_insertion_point(field_add:UTACommands.arrive)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTAArrived >&
UTACommands::arrive() const {
  // @@protoc_insertion_point(field_list:UTACommands.arrive)
  return arrive_;
}

// repeated .UTAOutDelivery todeliver = 2;
inline int UTACommands::_internal_todeliver_size() const {
  return todeliver_.size();
}
inline int UTACommands::todeliver_size() const {
  return _internal_todeliver_size();
}
inline void UTACommands::clear_todeliver() {
  todeliver_.Clear();
}
inline ::UTAOutDelivery* UTACommands::mutable_todeliver(int index) {
  // @@protoc_insertion_point(field_mutable:UTACommands.todeliver)
  return todeliver_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTAOutDelivery >*
UTACommands::mutable_todeliver() {
  // @@protoc_insertion_point(field_mutable_list:UTACommands.todeliver)
  return &todeliver_;
}
inline const ::UTAOutDelivery& UTACommands::_internal_todeliver(int index) const {
  return todeliver_.Get(index);
}
inline const ::UTAOutDelivery& UTACommands::todeliver(int index) const {
  // @@protoc_insertion_point(field_get:UTACommands.todeliver)
  return _internal_todeliver(index);
}
inline ::UTAOutDelivery* UTACommands::_internal_add_todeliver() {
  return todeliver_.Add();
}
inline ::UTAOutDelivery* UTACommands::add_todeliver() {
  ::UTAOutDelivery* _add = _internal_add_todeliver();
  // @@protoc_insertion_point(field_add:UTACommands.todeliver)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTAOutDelivery >&
UTACommands::todeliver() const {
  // @@protoc_insertion_point(field_list:UTACommands.todeliver)
  return todeliver_;
}

// repeated .UTADelivered delivered = 3;
inline int UTACommands::_internal_delivered_size() const {
  return delivered_.size();
}
inline int UTACommands::delivered_size() const {
  return _internal_delivered_size();
}
inline void UTACommands::clear_delivered() {
  delivered_.Clear();
}
inline ::UTADelivered* UTACommands::mutable_delivered(int index) {
  // @@protoc_insertion_point(field_mutable:UTACommands.delivered)
  return delivered_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTADelivered >*
UTACommands::mutable_delivered() {
  // @@protoc_insertion_point(field_mutable_list:UTACommands.delivered)
  return &delivered_;
}
inline const ::UTADelivered& UTACommands::_internal_delivered(int index) const {
  return delivered_.Get(index);
}
inline const ::UTADelivered& UTACommands::delivered(int index) const {
  // @@protoc_insertion_point(field_get:UTACommands.delivered)
  return _internal_delivered(index);
}
inline ::UTADelivered* UTACommands::_internal_add_delivered() {
  return delivered_.Add();
}
inline ::UTADelivered* UTACommands::add_delivered() {
  ::UTADelivered* _add = _internal_add_delivered();
  // @@protoc_insertion_point(field_add:UTACommands.delivered)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTADelivered >&
UTACommands::delivered() const {
  // @@protoc_insertion_point(field_list:UTACommands.delivered)
  return delivered_;
}

// repeated .AUErr err = 4;
inline int UTACommands::_internal_err_size() const {
  return err_.size();
}
inline int UTACommands::err_size() const {
  return _internal_err_size();
}
inline void UTACommands::clear_err() {
  err_.Clear();
}
inline ::AUErr* UTACommands::mutable_err(int index) {
  // @@protoc_insertion_point(field_mutable:UTACommands.err)
  return err_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUErr >*
UTACommands::mutable_err() {
  // @@protoc_insertion_point(field_mutable_list:UTACommands.err)
  return &err_;
}
inline const ::AUErr& UTACommands::_internal_err(int index) const {
  return err_.Get(index);
}
inline const ::AUErr& UTACommands::err(int index) const {
  // @@protoc_insertion_point(field_get:UTACommands.err)
  return _internal_err(index);
}
inline ::AUErr* UTACommands::_internal_add_err() {
  return err_.Add();
}
inline ::AUErr* UTACommands::add_err() {
  ::AUErr* _add = _internal_add_err();
  // @@protoc_insertion_point(field_add:UTACommands.err)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AUErr >&
UTACommands::err() const {
  // @@protoc_insertion_point(field_list:UTACommands.err)
  return err_;
}

// repeated int64 acks = 5;
inline int UTACommands::_internal_acks_size() const {
  return acks_.size();
}
inline int UTACommands::acks_size() const {
  return _internal_acks_size();
}
inline void UTACommands::clear_acks() {
  acks_.Clear();
}
inline int64_t UTACommands::_internal_acks(int index) const {
  return acks_.Get(index);
}
inline int64_t UTACommands::acks(int index) const {
  // @@protoc_insertion_point(field_get:UTACommands.acks)
  return _internal_acks(index);
}
inline void UTACommands::set_acks(int index, int64_t value) {
  acks_.Set(index, value);
  // @@protoc_insertion_point(field_set:UTACommands.acks)
}
inline void UTACommands::_internal_add_acks(int64_t value) {
  acks_.Add(value);
}
inline void UTACommands::add_acks(int64_t value) {
  _internal_add_acks(value);
  // @@protoc_insertion_point(field_add:UTACommands.acks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UTACommands::_internal_acks() const {
  return acks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UTACommands::acks() const {
  // @@protoc_insertion_point(field_list:UTACommands.acks)
  return _internal_acks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UTACommands::_internal_mutable_acks() {
  return &acks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UTACommands::mutable_acks() {
  // @@protoc_insertion_point(field_mutable_list:UTACommands.acks)
  return _internal_mutable_acks();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_uta_2eproto
