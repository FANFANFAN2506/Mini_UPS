// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uta.proto

#include "uta.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR UTAConnect::UTAConnect(
    ::_pbi::ConstantInitialized)
  : worldid_(int64_t{0}){}
struct UTAConnectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UTAConnectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UTAConnectDefaultTypeInternal() {}
  union {
    UTAConnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UTAConnectDefaultTypeInternal _UTAConnect_default_instance_;
PROTOBUF_CONSTEXPR AUConnected::AUConnected(
    ::_pbi::ConstantInitialized)
  : worldid_(int64_t{0}){}
struct AUConnectedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AUConnectedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AUConnectedDefaultTypeInternal() {}
  union {
    AUConnected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AUConnectedDefaultTypeInternal _AUConnected_default_instance_;
PROTOBUF_CONSTEXPR Desti_loc::Desti_loc(
    ::_pbi::ConstantInitialized)
  : x_(int64_t{0})
  , y_(int64_t{0}){}
struct Desti_locDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Desti_locDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Desti_locDefaultTypeInternal() {}
  union {
    Desti_loc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Desti_locDefaultTypeInternal _Desti_loc_default_instance_;
PROTOBUF_CONSTEXPR ATURequestPickUp::ATURequestPickUp(
    ::_pbi::ConstantInitialized)
  : product_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ups_account_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , destination_(nullptr)
  , packageid_(int64_t{0})
  , whid_(int64_t{0})
  , seqnum_(int64_t{0}){}
struct ATURequestPickUpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ATURequestPickUpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ATURequestPickUpDefaultTypeInternal() {}
  union {
    ATURequestPickUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ATURequestPickUpDefaultTypeInternal _ATURequestPickUp_default_instance_;
PROTOBUF_CONSTEXPR UTAArrived::UTAArrived(
    ::_pbi::ConstantInitialized)
  : packageid_()
  , truckid_(int64_t{0})
  , whid_(int64_t{0})
  , seqnum_(int64_t{0}){}
struct UTAArrivedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UTAArrivedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UTAArrivedDefaultTypeInternal() {}
  union {
    UTAArrived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UTAArrivedDefaultTypeInternal _UTAArrived_default_instance_;
PROTOBUF_CONSTEXPR ATULoaded::ATULoaded(
    ::_pbi::ConstantInitialized)
  : packageid_()
  , truckid_(int64_t{0})
  , seqnum_(int64_t{0}){}
struct ATULoadedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ATULoadedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ATULoadedDefaultTypeInternal() {}
  union {
    ATULoaded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ATULoadedDefaultTypeInternal _ATULoaded_default_instance_;
PROTOBUF_CONSTEXPR UTAOutDelivery::UTAOutDelivery(
    ::_pbi::ConstantInitialized)
  : packageid_(int64_t{0})
  , x_(int64_t{0})
  , y_(int64_t{0})
  , seqnum_(int64_t{0}){}
struct UTAOutDeliveryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UTAOutDeliveryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UTAOutDeliveryDefaultTypeInternal() {}
  union {
    UTAOutDelivery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UTAOutDeliveryDefaultTypeInternal _UTAOutDelivery_default_instance_;
PROTOBUF_CONSTEXPR UTADelivered::UTADelivered(
    ::_pbi::ConstantInitialized)
  : packageid_(int64_t{0})
  , seqnum_(int64_t{0}){}
struct UTADeliveredDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UTADeliveredDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UTADeliveredDefaultTypeInternal() {}
  union {
    UTADelivered _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UTADeliveredDefaultTypeInternal _UTADelivered_default_instance_;
PROTOBUF_CONSTEXPR AUErr::AUErr(
    ::_pbi::ConstantInitialized)
  : err_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , originseqnum_(int64_t{0})
  , seqnum_(int64_t{0}){}
struct AUErrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AUErrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AUErrDefaultTypeInternal() {}
  union {
    AUErr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AUErrDefaultTypeInternal _AUErr_default_instance_;
PROTOBUF_CONSTEXPR ATUCommands::ATUCommands(
    ::_pbi::ConstantInitialized)
  : topickup_()
  , loaded_()
  , err_()
  , acks_(){}
struct ATUCommandsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ATUCommandsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ATUCommandsDefaultTypeInternal() {}
  union {
    ATUCommands _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ATUCommandsDefaultTypeInternal _ATUCommands_default_instance_;
PROTOBUF_CONSTEXPR UTACommands::UTACommands(
    ::_pbi::ConstantInitialized)
  : arrive_()
  , todeliver_()
  , delivered_()
  , err_()
  , acks_(){}
struct UTACommandsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UTACommandsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UTACommandsDefaultTypeInternal() {}
  union {
    UTACommands _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UTACommandsDefaultTypeInternal _UTACommands_default_instance_;
static ::_pb::Metadata file_level_metadata_uta_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_uta_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_uta_2eproto = nullptr;

const uint32_t TableStruct_uta_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::UTAConnect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UTAConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UTAConnect, worldid_),
  0,
  PROTOBUF_FIELD_OFFSET(::AUConnected, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AUConnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AUConnected, worldid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Desti_loc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Desti_loc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Desti_loc, x_),
  PROTOBUF_FIELD_OFFSET(::Desti_loc, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ATURequestPickUp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ATURequestPickUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ATURequestPickUp, product_name_),
  PROTOBUF_FIELD_OFFSET(::ATURequestPickUp, packageid_),
  PROTOBUF_FIELD_OFFSET(::ATURequestPickUp, ups_account_),
  PROTOBUF_FIELD_OFFSET(::ATURequestPickUp, whid_),
  PROTOBUF_FIELD_OFFSET(::ATURequestPickUp, destination_),
  PROTOBUF_FIELD_OFFSET(::ATURequestPickUp, seqnum_),
  0,
  3,
  1,
  4,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::UTAArrived, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UTAArrived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UTAArrived, packageid_),
  PROTOBUF_FIELD_OFFSET(::UTAArrived, truckid_),
  PROTOBUF_FIELD_OFFSET(::UTAArrived, whid_),
  PROTOBUF_FIELD_OFFSET(::UTAArrived, seqnum_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ATULoaded, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ATULoaded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ATULoaded, packageid_),
  PROTOBUF_FIELD_OFFSET(::ATULoaded, truckid_),
  PROTOBUF_FIELD_OFFSET(::ATULoaded, seqnum_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::UTAOutDelivery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UTAOutDelivery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UTAOutDelivery, packageid_),
  PROTOBUF_FIELD_OFFSET(::UTAOutDelivery, x_),
  PROTOBUF_FIELD_OFFSET(::UTAOutDelivery, y_),
  PROTOBUF_FIELD_OFFSET(::UTAOutDelivery, seqnum_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::UTADelivered, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UTADelivered, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UTADelivered, packageid_),
  PROTOBUF_FIELD_OFFSET(::UTADelivered, seqnum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::AUErr, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AUErr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AUErr, err_),
  PROTOBUF_FIELD_OFFSET(::AUErr, originseqnum_),
  PROTOBUF_FIELD_OFFSET(::AUErr, seqnum_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ATUCommands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ATUCommands, topickup_),
  PROTOBUF_FIELD_OFFSET(::ATUCommands, loaded_),
  PROTOBUF_FIELD_OFFSET(::ATUCommands, err_),
  PROTOBUF_FIELD_OFFSET(::ATUCommands, acks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UTACommands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UTACommands, arrive_),
  PROTOBUF_FIELD_OFFSET(::UTACommands, todeliver_),
  PROTOBUF_FIELD_OFFSET(::UTACommands, delivered_),
  PROTOBUF_FIELD_OFFSET(::UTACommands, err_),
  PROTOBUF_FIELD_OFFSET(::UTACommands, acks_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::UTAConnect)},
  { 8, 15, -1, sizeof(::AUConnected)},
  { 16, 24, -1, sizeof(::Desti_loc)},
  { 26, 38, -1, sizeof(::ATURequestPickUp)},
  { 44, 54, -1, sizeof(::UTAArrived)},
  { 58, 67, -1, sizeof(::ATULoaded)},
  { 70, 80, -1, sizeof(::UTAOutDelivery)},
  { 84, 92, -1, sizeof(::UTADelivered)},
  { 94, 103, -1, sizeof(::AUErr)},
  { 106, -1, -1, sizeof(::ATUCommands)},
  { 116, -1, -1, sizeof(::UTACommands)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_UTAConnect_default_instance_._instance,
  &::_AUConnected_default_instance_._instance,
  &::_Desti_loc_default_instance_._instance,
  &::_ATURequestPickUp_default_instance_._instance,
  &::_UTAArrived_default_instance_._instance,
  &::_ATULoaded_default_instance_._instance,
  &::_UTAOutDelivery_default_instance_._instance,
  &::_UTADelivered_default_instance_._instance,
  &::_AUErr_default_instance_._instance,
  &::_ATUCommands_default_instance_._instance,
  &::_UTACommands_default_instance_._instance,
};

const char descriptor_table_protodef_uta_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tuta.proto\"\035\n\nUTAConnect\022\017\n\007worldid\030\001 \002"
  "(\003\"\036\n\013AUConnected\022\017\n\007worldid\030\001 \002(\003\"!\n\tDe"
  "sti_loc\022\t\n\001x\030\001 \002(\003\022\t\n\001y\030\002 \002(\003\"\217\001\n\020ATUReq"
  "uestPickUp\022\024\n\014product_name\030\001 \002(\t\022\021\n\tpack"
  "ageid\030\002 \002(\003\022\023\n\013ups_account\030\003 \001(\t\022\014\n\004whid"
  "\030\004 \002(\003\022\037\n\013destination\030\005 \002(\0132\n.Desti_loc\022"
  "\016\n\006seqnum\030\006 \002(\003\"N\n\nUTAArrived\022\021\n\tpackage"
  "id\030\001 \003(\003\022\017\n\007truckid\030\002 \002(\003\022\014\n\004whid\030\003 \002(\003\022"
  "\016\n\006seqnum\030\004 \002(\003\"\?\n\tATULoaded\022\021\n\tpackagei"
  "d\030\001 \003(\003\022\017\n\007truckid\030\002 \002(\003\022\016\n\006seqnum\030\003 \002(\003"
  "\"I\n\016UTAOutDelivery\022\021\n\tpackageid\030\001 \002(\003\022\t\n"
  "\001x\030\002 \002(\003\022\t\n\001y\030\003 \002(\003\022\016\n\006seqnum\030\004 \002(\003\"1\n\014U"
  "TADelivered\022\021\n\tpackageid\030\001 \002(\003\022\016\n\006seqnum"
  "\030\002 \002(\003\":\n\005AUErr\022\013\n\003err\030\001 \002(\t\022\024\n\014originse"
  "qnum\030\002 \002(\003\022\016\n\006seqnum\030\003 \002(\003\"q\n\013ATUCommand"
  "s\022#\n\010topickup\030\001 \003(\0132\021.ATURequestPickUp\022\032"
  "\n\006loaded\030\002 \003(\0132\n.ATULoaded\022\023\n\003err\030\003 \003(\0132"
  "\006.AUErr\022\014\n\004acks\030\004 \003(\003\"\223\001\n\013UTACommands\022\033\n"
  "\006arrive\030\001 \003(\0132\013.UTAArrived\022\"\n\ttodeliver\030"
  "\002 \003(\0132\017.UTAOutDelivery\022 \n\tdelivered\030\003 \003("
  "\0132\r.UTADelivered\022\023\n\003err\030\004 \003(\0132\006.AUErr\022\014\n"
  "\004acks\030\005 \003(\003"
  ;
static ::_pbi::once_flag descriptor_table_uta_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_uta_2eproto = {
    false, false, 851, descriptor_table_protodef_uta_2eproto,
    "uta.proto",
    &descriptor_table_uta_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_uta_2eproto::offsets,
    file_level_metadata_uta_2eproto, file_level_enum_descriptors_uta_2eproto,
    file_level_service_descriptors_uta_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_uta_2eproto_getter() {
  return &descriptor_table_uta_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_uta_2eproto(&descriptor_table_uta_2eproto);

// ===================================================================

class UTAConnect::_Internal {
 public:
  using HasBits = decltype(std::declval<UTAConnect>()._has_bits_);
  static void set_has_worldid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UTAConnect::UTAConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UTAConnect)
}
UTAConnect::UTAConnect(const UTAConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  worldid_ = from.worldid_;
  // @@protoc_insertion_point(copy_constructor:UTAConnect)
}

inline void UTAConnect::SharedCtor() {
worldid_ = int64_t{0};
}

UTAConnect::~UTAConnect() {
  // @@protoc_insertion_point(destructor:UTAConnect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UTAConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UTAConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UTAConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:UTAConnect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worldid_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UTAConnect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 worldid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_worldid(&has_bits);
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UTAConnect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UTAConnect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 worldid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_worldid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UTAConnect)
  return target;
}

size_t UTAConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UTAConnect)
  size_t total_size = 0;

  // required int64 worldid = 1;
  if (_internal_has_worldid()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_worldid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UTAConnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UTAConnect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UTAConnect::GetClassData() const { return &_class_data_; }

void UTAConnect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UTAConnect *>(to)->MergeFrom(
      static_cast<const UTAConnect &>(from));
}


void UTAConnect::MergeFrom(const UTAConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UTAConnect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_worldid()) {
    _internal_set_worldid(from._internal_worldid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UTAConnect::CopyFrom(const UTAConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UTAConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UTAConnect::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UTAConnect::InternalSwap(UTAConnect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(worldid_, other->worldid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UTAConnect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uta_2eproto_getter, &descriptor_table_uta_2eproto_once,
      file_level_metadata_uta_2eproto[0]);
}

// ===================================================================

class AUConnected::_Internal {
 public:
  using HasBits = decltype(std::declval<AUConnected>()._has_bits_);
  static void set_has_worldid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AUConnected::AUConnected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AUConnected)
}
AUConnected::AUConnected(const AUConnected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  worldid_ = from.worldid_;
  // @@protoc_insertion_point(copy_constructor:AUConnected)
}

inline void AUConnected::SharedCtor() {
worldid_ = int64_t{0};
}

AUConnected::~AUConnected() {
  // @@protoc_insertion_point(destructor:AUConnected)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AUConnected::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AUConnected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AUConnected::Clear() {
// @@protoc_insertion_point(message_clear_start:AUConnected)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worldid_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AUConnected::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 worldid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_worldid(&has_bits);
          worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AUConnected::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUConnected)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 worldid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_worldid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUConnected)
  return target;
}

size_t AUConnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUConnected)
  size_t total_size = 0;

  // required int64 worldid = 1;
  if (_internal_has_worldid()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_worldid());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AUConnected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AUConnected::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AUConnected::GetClassData() const { return &_class_data_; }

void AUConnected::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AUConnected *>(to)->MergeFrom(
      static_cast<const AUConnected &>(from));
}


void AUConnected::MergeFrom(const AUConnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUConnected)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_worldid()) {
    _internal_set_worldid(from._internal_worldid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AUConnected::CopyFrom(const AUConnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUConnected::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AUConnected::InternalSwap(AUConnected* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(worldid_, other->worldid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AUConnected::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uta_2eproto_getter, &descriptor_table_uta_2eproto_once,
      file_level_metadata_uta_2eproto[1]);
}

// ===================================================================

class Desti_loc::_Internal {
 public:
  using HasBits = decltype(std::declval<Desti_loc>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Desti_loc::Desti_loc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Desti_loc)
}
Desti_loc::Desti_loc(const Desti_loc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Desti_loc)
}

inline void Desti_loc::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Desti_loc::~Desti_loc() {
  // @@protoc_insertion_point(destructor:Desti_loc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Desti_loc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Desti_loc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Desti_loc::Clear() {
// @@protoc_insertion_point(message_clear_start:Desti_loc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Desti_loc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Desti_loc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Desti_loc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_x(), target);
  }

  // required int64 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Desti_loc)
  return target;
}

size_t Desti_loc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Desti_loc)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required int64 x = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_x());
  }

  if (_internal_has_y()) {
    // required int64 y = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_y());
  }

  return total_size;
}
size_t Desti_loc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Desti_loc)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 x = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_x());

    // required int64 y = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Desti_loc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Desti_loc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Desti_loc::GetClassData() const { return &_class_data_; }

void Desti_loc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Desti_loc *>(to)->MergeFrom(
      static_cast<const Desti_loc &>(from));
}


void Desti_loc::MergeFrom(const Desti_loc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Desti_loc)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Desti_loc::CopyFrom(const Desti_loc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Desti_loc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Desti_loc::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Desti_loc::InternalSwap(Desti_loc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Desti_loc, y_)
      + sizeof(Desti_loc::y_)
      - PROTOBUF_FIELD_OFFSET(Desti_loc, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Desti_loc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uta_2eproto_getter, &descriptor_table_uta_2eproto_once,
      file_level_metadata_uta_2eproto[2]);
}

// ===================================================================

class ATURequestPickUp::_Internal {
 public:
  using HasBits = decltype(std::declval<ATURequestPickUp>()._has_bits_);
  static void set_has_product_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ups_account(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_whid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Desti_loc& destination(const ATURequestPickUp* msg);
  static void set_has_destination(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003d) ^ 0x0000003d) != 0;
  }
};

const ::Desti_loc&
ATURequestPickUp::_Internal::destination(const ATURequestPickUp* msg) {
  return *msg->destination_;
}
ATURequestPickUp::ATURequestPickUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ATURequestPickUp)
}
ATURequestPickUp::ATURequestPickUp(const ATURequestPickUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    product_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_product_name()) {
    product_name_.Set(from._internal_product_name(), 
      GetArenaForAllocation());
  }
  ups_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ups_account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ups_account()) {
    ups_account_.Set(from._internal_ups_account(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_destination()) {
    destination_ = new ::Desti_loc(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:ATURequestPickUp)
}

inline void ATURequestPickUp::SharedCtor() {
product_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  product_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ups_account_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ups_account_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&destination_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&destination_)) + sizeof(seqnum_));
}

ATURequestPickUp::~ATURequestPickUp() {
  // @@protoc_insertion_point(destructor:ATURequestPickUp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ATURequestPickUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  product_name_.Destroy();
  ups_account_.Destroy();
  if (this != internal_default_instance()) delete destination_;
}

void ATURequestPickUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ATURequestPickUp::Clear() {
// @@protoc_insertion_point(message_clear_start:ATURequestPickUp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      product_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ups_account_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(destination_ != nullptr);
      destination_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ATURequestPickUp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string product_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_product_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ATURequestPickUp.product_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 packageid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ups_account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ups_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ATURequestPickUp.ups_account");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 whid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_whid(&has_bits);
          whid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Desti_loc destination = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ATURequestPickUp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ATURequestPickUp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string product_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_product_name().data(), static_cast<int>(this->_internal_product_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ATURequestPickUp.product_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_product_name(), target);
  }

  // required int64 packageid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_packageid(), target);
  }

  // optional string ups_account = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ups_account().data(), static_cast<int>(this->_internal_ups_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ATURequestPickUp.ups_account");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ups_account(), target);
  }

  // required int64 whid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_whid(), target);
  }

  // required .Desti_loc destination = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::destination(this),
        _Internal::destination(this).GetCachedSize(), target, stream);
  }

  // required int64 seqnum = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ATURequestPickUp)
  return target;
}

size_t ATURequestPickUp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ATURequestPickUp)
  size_t total_size = 0;

  if (_internal_has_product_name()) {
    // required string product_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_name());
  }

  if (_internal_has_destination()) {
    // required .Desti_loc destination = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  if (_internal_has_packageid()) {
    // required int64 packageid = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());
  }

  if (_internal_has_whid()) {
    // required int64 whid = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_whid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 6;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t ATURequestPickUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ATURequestPickUp)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003d) ^ 0x0000003d) == 0) {  // All required fields are present.
    // required string product_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_name());

    // required .Desti_loc destination = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);

    // required int64 packageid = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());

    // required int64 whid = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_whid());

    // required int64 seqnum = 6;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string ups_account = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ups_account());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ATURequestPickUp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ATURequestPickUp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ATURequestPickUp::GetClassData() const { return &_class_data_; }

void ATURequestPickUp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ATURequestPickUp *>(to)->MergeFrom(
      static_cast<const ATURequestPickUp &>(from));
}


void ATURequestPickUp::MergeFrom(const ATURequestPickUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ATURequestPickUp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_product_name(from._internal_product_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ups_account(from._internal_ups_account());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_destination()->::Desti_loc::MergeFrom(from._internal_destination());
    }
    if (cached_has_bits & 0x00000008u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000010u) {
      whid_ = from.whid_;
    }
    if (cached_has_bits & 0x00000020u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ATURequestPickUp::CopyFrom(const ATURequestPickUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ATURequestPickUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATURequestPickUp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_destination()) {
    if (!destination_->IsInitialized()) return false;
  }
  return true;
}

void ATURequestPickUp::InternalSwap(ATURequestPickUp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &product_name_, lhs_arena,
      &other->product_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ups_account_, lhs_arena,
      &other->ups_account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ATURequestPickUp, seqnum_)
      + sizeof(ATURequestPickUp::seqnum_)
      - PROTOBUF_FIELD_OFFSET(ATURequestPickUp, destination_)>(
          reinterpret_cast<char*>(&destination_),
          reinterpret_cast<char*>(&other->destination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ATURequestPickUp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uta_2eproto_getter, &descriptor_table_uta_2eproto_once,
      file_level_metadata_uta_2eproto[3]);
}

// ===================================================================

class UTAArrived::_Internal {
 public:
  using HasBits = decltype(std::declval<UTAArrived>()._has_bits_);
  static void set_has_truckid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_whid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

UTAArrived::UTAArrived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  packageid_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UTAArrived)
}
UTAArrived::UTAArrived(const UTAArrived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      packageid_(from.packageid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&truckid_, &from.truckid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&truckid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:UTAArrived)
}

inline void UTAArrived::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&truckid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&truckid_)) + sizeof(seqnum_));
}

UTAArrived::~UTAArrived() {
  // @@protoc_insertion_point(destructor:UTAArrived)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UTAArrived::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UTAArrived::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UTAArrived::Clear() {
// @@protoc_insertion_point(message_clear_start:UTAArrived)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packageid_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&truckid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&truckid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UTAArrived::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_packageid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_packageid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 truckid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_truckid(&has_bits);
          truckid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 whid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_whid(&has_bits);
          whid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UTAArrived::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UTAArrived)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 packageid = 1;
  for (int i = 0, n = this->_internal_packageid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_packageid(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int64 truckid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_truckid(), target);
  }

  // required int64 whid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_whid(), target);
  }

  // required int64 seqnum = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UTAArrived)
  return target;
}

size_t UTAArrived::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UTAArrived)
  size_t total_size = 0;

  if (_internal_has_truckid()) {
    // required int64 truckid = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_truckid());
  }

  if (_internal_has_whid()) {
    // required int64 whid = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_whid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t UTAArrived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UTAArrived)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 truckid = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_truckid());

    // required int64 whid = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_whid());

    // required int64 seqnum = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 packageid = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->packageid_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_packageid_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UTAArrived::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UTAArrived::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UTAArrived::GetClassData() const { return &_class_data_; }

void UTAArrived::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UTAArrived *>(to)->MergeFrom(
      static_cast<const UTAArrived &>(from));
}


void UTAArrived::MergeFrom(const UTAArrived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UTAArrived)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  packageid_.MergeFrom(from.packageid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      truckid_ = from.truckid_;
    }
    if (cached_has_bits & 0x00000002u) {
      whid_ = from.whid_;
    }
    if (cached_has_bits & 0x00000004u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UTAArrived::CopyFrom(const UTAArrived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UTAArrived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UTAArrived::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UTAArrived::InternalSwap(UTAArrived* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  packageid_.InternalSwap(&other->packageid_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UTAArrived, seqnum_)
      + sizeof(UTAArrived::seqnum_)
      - PROTOBUF_FIELD_OFFSET(UTAArrived, truckid_)>(
          reinterpret_cast<char*>(&truckid_),
          reinterpret_cast<char*>(&other->truckid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UTAArrived::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uta_2eproto_getter, &descriptor_table_uta_2eproto_once,
      file_level_metadata_uta_2eproto[4]);
}

// ===================================================================

class ATULoaded::_Internal {
 public:
  using HasBits = decltype(std::declval<ATULoaded>()._has_bits_);
  static void set_has_truckid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ATULoaded::ATULoaded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  packageid_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ATULoaded)
}
ATULoaded::ATULoaded(const ATULoaded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      packageid_(from.packageid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&truckid_, &from.truckid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&truckid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:ATULoaded)
}

inline void ATULoaded::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&truckid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&truckid_)) + sizeof(seqnum_));
}

ATULoaded::~ATULoaded() {
  // @@protoc_insertion_point(destructor:ATULoaded)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ATULoaded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ATULoaded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ATULoaded::Clear() {
// @@protoc_insertion_point(message_clear_start:ATULoaded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packageid_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&truckid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&truckid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ATULoaded::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_packageid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_packageid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 truckid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_truckid(&has_bits);
          truckid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ATULoaded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ATULoaded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 packageid = 1;
  for (int i = 0, n = this->_internal_packageid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_packageid(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int64 truckid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_truckid(), target);
  }

  // required int64 seqnum = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ATULoaded)
  return target;
}

size_t ATULoaded::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ATULoaded)
  size_t total_size = 0;

  if (_internal_has_truckid()) {
    // required int64 truckid = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_truckid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t ATULoaded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ATULoaded)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 truckid = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_truckid());

    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 packageid = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->packageid_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_packageid_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ATULoaded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ATULoaded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ATULoaded::GetClassData() const { return &_class_data_; }

void ATULoaded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ATULoaded *>(to)->MergeFrom(
      static_cast<const ATULoaded &>(from));
}


void ATULoaded::MergeFrom(const ATULoaded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ATULoaded)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  packageid_.MergeFrom(from.packageid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      truckid_ = from.truckid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ATULoaded::CopyFrom(const ATULoaded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ATULoaded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATULoaded::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ATULoaded::InternalSwap(ATULoaded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  packageid_.InternalSwap(&other->packageid_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ATULoaded, seqnum_)
      + sizeof(ATULoaded::seqnum_)
      - PROTOBUF_FIELD_OFFSET(ATULoaded, truckid_)>(
          reinterpret_cast<char*>(&truckid_),
          reinterpret_cast<char*>(&other->truckid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ATULoaded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uta_2eproto_getter, &descriptor_table_uta_2eproto_once,
      file_level_metadata_uta_2eproto[5]);
}

// ===================================================================

class UTAOutDelivery::_Internal {
 public:
  using HasBits = decltype(std::declval<UTAOutDelivery>()._has_bits_);
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

UTAOutDelivery::UTAOutDelivery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UTAOutDelivery)
}
UTAOutDelivery::UTAOutDelivery(const UTAOutDelivery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:UTAOutDelivery)
}

inline void UTAOutDelivery::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packageid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
}

UTAOutDelivery::~UTAOutDelivery() {
  // @@protoc_insertion_point(destructor:UTAOutDelivery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UTAOutDelivery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UTAOutDelivery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UTAOutDelivery::Clear() {
// @@protoc_insertion_point(message_clear_start:UTAOutDelivery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UTAOutDelivery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UTAOutDelivery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UTAOutDelivery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 packageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_packageid(), target);
  }

  // required int64 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_x(), target);
  }

  // required int64 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_y(), target);
  }

  // required int64 seqnum = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UTAOutDelivery)
  return target;
}

size_t UTAOutDelivery::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UTAOutDelivery)
  size_t total_size = 0;

  if (_internal_has_packageid()) {
    // required int64 packageid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());
  }

  if (_internal_has_x()) {
    // required int64 x = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_x());
  }

  if (_internal_has_y()) {
    // required int64 y = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_y());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t UTAOutDelivery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UTAOutDelivery)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 packageid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());

    // required int64 x = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_x());

    // required int64 y = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_y());

    // required int64 seqnum = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UTAOutDelivery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UTAOutDelivery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UTAOutDelivery::GetClassData() const { return &_class_data_; }

void UTAOutDelivery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UTAOutDelivery *>(to)->MergeFrom(
      static_cast<const UTAOutDelivery &>(from));
}


void UTAOutDelivery::MergeFrom(const UTAOutDelivery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UTAOutDelivery)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UTAOutDelivery::CopyFrom(const UTAOutDelivery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UTAOutDelivery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UTAOutDelivery::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UTAOutDelivery::InternalSwap(UTAOutDelivery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UTAOutDelivery, seqnum_)
      + sizeof(UTAOutDelivery::seqnum_)
      - PROTOBUF_FIELD_OFFSET(UTAOutDelivery, packageid_)>(
          reinterpret_cast<char*>(&packageid_),
          reinterpret_cast<char*>(&other->packageid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UTAOutDelivery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uta_2eproto_getter, &descriptor_table_uta_2eproto_once,
      file_level_metadata_uta_2eproto[6]);
}

// ===================================================================

class UTADelivered::_Internal {
 public:
  using HasBits = decltype(std::declval<UTADelivered>()._has_bits_);
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UTADelivered::UTADelivered(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UTADelivered)
}
UTADelivered::UTADelivered(const UTADelivered& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:UTADelivered)
}

inline void UTADelivered::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packageid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
}

UTADelivered::~UTADelivered() {
  // @@protoc_insertion_point(destructor:UTADelivered)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UTADelivered::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UTADelivered::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UTADelivered::Clear() {
// @@protoc_insertion_point(message_clear_start:UTADelivered)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UTADelivered::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UTADelivered::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UTADelivered)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 packageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_packageid(), target);
  }

  // required int64 seqnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UTADelivered)
  return target;
}

size_t UTADelivered::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UTADelivered)
  size_t total_size = 0;

  if (_internal_has_packageid()) {
    // required int64 packageid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t UTADelivered::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UTADelivered)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 packageid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());

    // required int64 seqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UTADelivered::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UTADelivered::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UTADelivered::GetClassData() const { return &_class_data_; }

void UTADelivered::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UTADelivered *>(to)->MergeFrom(
      static_cast<const UTADelivered &>(from));
}


void UTADelivered::MergeFrom(const UTADelivered& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UTADelivered)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UTADelivered::CopyFrom(const UTADelivered& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UTADelivered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UTADelivered::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UTADelivered::InternalSwap(UTADelivered* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UTADelivered, seqnum_)
      + sizeof(UTADelivered::seqnum_)
      - PROTOBUF_FIELD_OFFSET(UTADelivered, packageid_)>(
          reinterpret_cast<char*>(&packageid_),
          reinterpret_cast<char*>(&other->packageid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UTADelivered::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uta_2eproto_getter, &descriptor_table_uta_2eproto_once,
      file_level_metadata_uta_2eproto[7]);
}

// ===================================================================

class AUErr::_Internal {
 public:
  using HasBits = decltype(std::declval<AUErr>()._has_bits_);
  static void set_has_err(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_originseqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AUErr::AUErr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AUErr)
}
AUErr::AUErr(const AUErr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_err()) {
    err_.Set(from._internal_err(), 
      GetArenaForAllocation());
  }
  ::memcpy(&originseqnum_, &from.originseqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:AUErr)
}

inline void AUErr::SharedCtor() {
err_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&originseqnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
}

AUErr::~AUErr() {
  // @@protoc_insertion_point(destructor:AUErr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AUErr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_.Destroy();
}

void AUErr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AUErr::Clear() {
// @@protoc_insertion_point(message_clear_start:AUErr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    err_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&originseqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AUErr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_err();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "AUErr.err");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 originseqnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_originseqnum(&has_bits);
          originseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AUErr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUErr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string err = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_err().data(), static_cast<int>(this->_internal_err().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "AUErr.err");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_err(), target);
  }

  // required int64 originseqnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_originseqnum(), target);
  }

  // required int64 seqnum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUErr)
  return target;
}

size_t AUErr::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AUErr)
  size_t total_size = 0;

  if (_internal_has_err()) {
    // required string err = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err());
  }

  if (_internal_has_originseqnum()) {
    // required int64 originseqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_originseqnum());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t AUErr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUErr)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string err = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err());

    // required int64 originseqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_originseqnum());

    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AUErr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AUErr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AUErr::GetClassData() const { return &_class_data_; }

void AUErr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AUErr *>(to)->MergeFrom(
      static_cast<const AUErr &>(from));
}


void AUErr::MergeFrom(const AUErr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUErr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_err(from._internal_err());
    }
    if (cached_has_bits & 0x00000002u) {
      originseqnum_ = from.originseqnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AUErr::CopyFrom(const AUErr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUErr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUErr::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AUErr::InternalSwap(AUErr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &err_, lhs_arena,
      &other->err_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AUErr, seqnum_)
      + sizeof(AUErr::seqnum_)
      - PROTOBUF_FIELD_OFFSET(AUErr, originseqnum_)>(
          reinterpret_cast<char*>(&originseqnum_),
          reinterpret_cast<char*>(&other->originseqnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AUErr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uta_2eproto_getter, &descriptor_table_uta_2eproto_once,
      file_level_metadata_uta_2eproto[8]);
}

// ===================================================================

class ATUCommands::_Internal {
 public:
};

ATUCommands::ATUCommands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  topickup_(arena),
  loaded_(arena),
  err_(arena),
  acks_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ATUCommands)
}
ATUCommands::ATUCommands(const ATUCommands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      topickup_(from.topickup_),
      loaded_(from.loaded_),
      err_(from.err_),
      acks_(from.acks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ATUCommands)
}

inline void ATUCommands::SharedCtor() {
}

ATUCommands::~ATUCommands() {
  // @@protoc_insertion_point(destructor:ATUCommands)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ATUCommands::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ATUCommands::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ATUCommands::Clear() {
// @@protoc_insertion_point(message_clear_start:ATUCommands)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topickup_.Clear();
  loaded_.Clear();
  err_.Clear();
  acks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ATUCommands::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ATURequestPickUp topickup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_topickup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ATULoaded loaded = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_loaded(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .AUErr err = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_err(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 acks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_acks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_acks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ATUCommands::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ATUCommands)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ATURequestPickUp topickup = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_topickup_size()); i < n; i++) {
    const auto& repfield = this->_internal_topickup(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ATULoaded loaded = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_loaded_size()); i < n; i++) {
    const auto& repfield = this->_internal_loaded(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .AUErr err = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_err_size()); i < n; i++) {
    const auto& repfield = this->_internal_err(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 acks = 4;
  for (int i = 0, n = this->_internal_acks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_acks(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ATUCommands)
  return target;
}

size_t ATUCommands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ATUCommands)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ATURequestPickUp topickup = 1;
  total_size += 1UL * this->_internal_topickup_size();
  for (const auto& msg : this->topickup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ATULoaded loaded = 2;
  total_size += 1UL * this->_internal_loaded_size();
  for (const auto& msg : this->loaded_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AUErr err = 3;
  total_size += 1UL * this->_internal_err_size();
  for (const auto& msg : this->err_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 acks = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->acks_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_acks_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ATUCommands::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ATUCommands::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ATUCommands::GetClassData() const { return &_class_data_; }

void ATUCommands::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ATUCommands *>(to)->MergeFrom(
      static_cast<const ATUCommands &>(from));
}


void ATUCommands::MergeFrom(const ATUCommands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ATUCommands)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  topickup_.MergeFrom(from.topickup_);
  loaded_.MergeFrom(from.loaded_);
  err_.MergeFrom(from.err_);
  acks_.MergeFrom(from.acks_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ATUCommands::CopyFrom(const ATUCommands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ATUCommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATUCommands::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(topickup_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(loaded_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(err_))
    return false;
  return true;
}

void ATUCommands::InternalSwap(ATUCommands* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  topickup_.InternalSwap(&other->topickup_);
  loaded_.InternalSwap(&other->loaded_);
  err_.InternalSwap(&other->err_);
  acks_.InternalSwap(&other->acks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ATUCommands::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uta_2eproto_getter, &descriptor_table_uta_2eproto_once,
      file_level_metadata_uta_2eproto[9]);
}

// ===================================================================

class UTACommands::_Internal {
 public:
};

UTACommands::UTACommands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arrive_(arena),
  todeliver_(arena),
  delivered_(arena),
  err_(arena),
  acks_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UTACommands)
}
UTACommands::UTACommands(const UTACommands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arrive_(from.arrive_),
      todeliver_(from.todeliver_),
      delivered_(from.delivered_),
      err_(from.err_),
      acks_(from.acks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UTACommands)
}

inline void UTACommands::SharedCtor() {
}

UTACommands::~UTACommands() {
  // @@protoc_insertion_point(destructor:UTACommands)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UTACommands::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UTACommands::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UTACommands::Clear() {
// @@protoc_insertion_point(message_clear_start:UTACommands)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arrive_.Clear();
  todeliver_.Clear();
  delivered_.Clear();
  err_.Clear();
  acks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UTACommands::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .UTAArrived arrive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arrive(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .UTAOutDelivery todeliver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_todeliver(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .UTADelivered delivered = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delivered(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .AUErr err = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_err(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 acks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_acks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_acks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UTACommands::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UTACommands)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UTAArrived arrive = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arrive_size()); i < n; i++) {
    const auto& repfield = this->_internal_arrive(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .UTAOutDelivery todeliver = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_todeliver_size()); i < n; i++) {
    const auto& repfield = this->_internal_todeliver(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .UTADelivered delivered = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_delivered_size()); i < n; i++) {
    const auto& repfield = this->_internal_delivered(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .AUErr err = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_err_size()); i < n; i++) {
    const auto& repfield = this->_internal_err(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 acks = 5;
  for (int i = 0, n = this->_internal_acks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_acks(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UTACommands)
  return target;
}

size_t UTACommands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UTACommands)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UTAArrived arrive = 1;
  total_size += 1UL * this->_internal_arrive_size();
  for (const auto& msg : this->arrive_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UTAOutDelivery todeliver = 2;
  total_size += 1UL * this->_internal_todeliver_size();
  for (const auto& msg : this->todeliver_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UTADelivered delivered = 3;
  total_size += 1UL * this->_internal_delivered_size();
  for (const auto& msg : this->delivered_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AUErr err = 4;
  total_size += 1UL * this->_internal_err_size();
  for (const auto& msg : this->err_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 acks = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->acks_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_acks_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UTACommands::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UTACommands::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UTACommands::GetClassData() const { return &_class_data_; }

void UTACommands::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UTACommands *>(to)->MergeFrom(
      static_cast<const UTACommands &>(from));
}


void UTACommands::MergeFrom(const UTACommands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UTACommands)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  arrive_.MergeFrom(from.arrive_);
  todeliver_.MergeFrom(from.todeliver_);
  delivered_.MergeFrom(from.delivered_);
  err_.MergeFrom(from.err_);
  acks_.MergeFrom(from.acks_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UTACommands::CopyFrom(const UTACommands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UTACommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UTACommands::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(arrive_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(todeliver_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(delivered_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(err_))
    return false;
  return true;
}

void UTACommands::InternalSwap(UTACommands* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  arrive_.InternalSwap(&other->arrive_);
  todeliver_.InternalSwap(&other->todeliver_);
  delivered_.InternalSwap(&other->delivered_);
  err_.InternalSwap(&other->err_);
  acks_.InternalSwap(&other->acks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UTACommands::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uta_2eproto_getter, &descriptor_table_uta_2eproto_once,
      file_level_metadata_uta_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UTAConnect*
Arena::CreateMaybeMessage< ::UTAConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UTAConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::AUConnected*
Arena::CreateMaybeMessage< ::AUConnected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AUConnected >(arena);
}
template<> PROTOBUF_NOINLINE ::Desti_loc*
Arena::CreateMaybeMessage< ::Desti_loc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Desti_loc >(arena);
}
template<> PROTOBUF_NOINLINE ::ATURequestPickUp*
Arena::CreateMaybeMessage< ::ATURequestPickUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ATURequestPickUp >(arena);
}
template<> PROTOBUF_NOINLINE ::UTAArrived*
Arena::CreateMaybeMessage< ::UTAArrived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UTAArrived >(arena);
}
template<> PROTOBUF_NOINLINE ::ATULoaded*
Arena::CreateMaybeMessage< ::ATULoaded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ATULoaded >(arena);
}
template<> PROTOBUF_NOINLINE ::UTAOutDelivery*
Arena::CreateMaybeMessage< ::UTAOutDelivery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UTAOutDelivery >(arena);
}
template<> PROTOBUF_NOINLINE ::UTADelivered*
Arena::CreateMaybeMessage< ::UTADelivered >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UTADelivered >(arena);
}
template<> PROTOBUF_NOINLINE ::AUErr*
Arena::CreateMaybeMessage< ::AUErr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AUErr >(arena);
}
template<> PROTOBUF_NOINLINE ::ATUCommands*
Arena::CreateMaybeMessage< ::ATUCommands >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ATUCommands >(arena);
}
template<> PROTOBUF_NOINLINE ::UTACommands*
Arena::CreateMaybeMessage< ::UTACommands >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UTACommands >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
